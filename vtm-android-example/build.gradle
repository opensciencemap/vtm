buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
  }
}

apply plugin: 'android'

dependencies {
  compile project(':vtm-android')
  compile project(':vtm-jeo')
  compile project(':vtm-extras')
  compile project(':vtm-themes')
  compile 'com.squareup.okhttp:okhttp:1.5.2'
}

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src', 'assets']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }
  // remove duplicates
  packagingOptions {
	exclude 'META-INF/services/org.jeo.data.Driver'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }

  // ignore deprecated
  lintOptions.abortOnError false
}

// Including configurations into Eclipse

eclipse.jdt {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}

// Configuring Eclipse classpath
eclipse.classpath {
  plusConfigurations += configurations.compile

  defaultOutputDir = file('bin/classes')

  file {
    // Direct manipulation of the generated classpath XML
    withXml {
      def node = it.asNode()
      node.appendNode('classpathentry kind="src" path="src"')
      node.appendNode('classpathentry kind="src" path="gen"')
    }
  }
}

eclipse.project {
  natures = ['com.android.ide.eclipse.adt.AndroidNature',
	     'org.eclipse.jdt.core.javanature']

  buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
  buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
  buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
}


task run (dependsOn: 'installDebug'){
  doFirst {
    println(">> adb run...")
    String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
    String cmd = "${adb} shell am start -n org.oscim.android.test/.Samples"
    def proc = cmd.execute()
    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
    proc.waitFor()
  }
}